/// <reference types="node" />
import { EventEmitter } from "events";
import { Characteristic, Peripheral } from "noble";
import { Port } from "./port";
import * as Consts from "./consts";
/**
 * @class Hub
 * @ignore
 * @extends EventEmitter
 */
export declare class Hub extends EventEmitter {
    autoSubscribe: boolean;
    useSpeedMap: boolean;
    type: Consts.Hubs;
    protected _ports: {
        [port: string]: Port;
    };
    protected _characteristics: {
        [uuid: string]: Characteristic;
    };
    protected _name: string;
    protected _batteryLevel: number;
    private _peripheral;
    private _uuid;
    private _rssi;
    constructor(peripheral: Peripheral, autoSubscribe?: boolean);
    /**
     * @readonly
     * @property {string} name Name of the hub
     */
    readonly name: string;
    /**
     * @readonly
     * @property {string} uuid UUID of the hub
     */
    readonly uuid: string;
    /**
     * @readonly
     * @property {number} rssi Signal strength of the hub
     */
    readonly rssi: number;
    /**
     * @readonly
     * @property {number} batteryLevel Battery level of the hub (Percentage between 0-100)
     */
    readonly batteryLevel: number;
    /**
     * Connect to the Hub.
     * @method Hub#connect
     * @returns {Promise} Resolved upon successful connect.
     */
    connect(): Promise<{}>;
    /**
     * Disconnect the Hub.
     * @method Hub#disconnect
     * @returns {Promise} Resolved upon successful disconnect.
     */
    disconnect(): Promise<{}>;
    /**
     * Subscribe to sensor notifications on a given port.
     * @method Hub#subscribe
     * @param {string} port
     * @param {number} [mode] The sensor mode to activate. If no mode is provided, the default for that sensor will be chosen.
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    subscribe(port: string, mode?: number): Promise<{}>;
    /**
     * Unsubscribe to sensor notifications on a given port.
     * @method Hub#unsubscribe
     * @param {string} port
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    unsubscribe(port: string): Promise<{}>;
    /**
     * Sleep a given amount of time.
     *
     * This is a helper method to make it easier to add delays into a chain of commands.
     * @method Hub#sleep
     * @param {number} delay How long to sleep (in milliseconds).
     * @returns {Promise} Resolved after the delay is finished.
     */
    sleep(delay: number): Promise<{}>;
    /**
     * Wait until a given list of concurrently running commands are complete.
     *
     * This is a helper method to make it easier to wait for concurrent commands to complete.
     * @method Hub#wait
     * @param {Array<Promise<any>>} commands Array of executing commands.
     * @returns {Promise} Resolved after the commands are finished.
     */
    wait(commands: Array<Promise<any>>): Promise<any[]>;
    protected _getCharacteristic(uuid: string): Characteristic;
    protected _subscribeToCharacteristic(characteristic: Characteristic, callback: (data: Buffer) => void): void;
    protected _activatePortDevice(port: number, type: number, mode: number, format: number, callback?: () => void): void;
    protected _deactivatePortDevice(port: number, type: number, mode: number, format: number, callback?: () => void): void;
    protected _registerDeviceAttachment(port: Port, type: number): void;
    protected _getPortForPortNumber(num: number): false | Port;
    protected _mapSpeed(speed: number): number;
    protected _calculateRamp(fromSpeed: number, toSpeed: number, time: number, port: Port): EventEmitter;
    protected _portLookup(port: string): Port;
    private _getModeForDeviceType;
}
