/// <reference types="node" />
import { Hub } from "./hub";
/**
 * @class LPF2Hub
 * @ignore
 * @extends Hub
 */
export declare class LPF2Hub extends Hub {
    protected _current: number;
    private _lastTiltX;
    private _lastTiltY;
    private _messageBuffer;
    /**
     * @readonly
     * @property {number} current Current usage of the hub (Amps)
     */
    readonly current: number;
    connect(): Promise<{}>;
    /**
     * Set the name of the Hub.
     * @method LPF2Hub#setName
     * @param {string} name New name of the hub (14 characters or less, ASCII only).
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    setName(name: string): Promise<{}>;
    /**
     * Set the color of the LED on the Hub via a color value.
     * @method LPF2Hub#setLEDColor
     * @param {number} color A number representing one of the LED color consts.
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    setLEDColor(color: number | boolean): Promise<{}>;
    /**
     * Set the color of the LED on the Hub via RGB values.
     * @method LPF2Hub#setLEDRGB
     * @param {number} red
     * @param {number} green
     * @param {number} blue
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    setLEDRGB(red: number, green: number, blue: number): Promise<{}>;
    protected _activatePortDevice(port: number, type: number, mode: number, format: number, callback?: () => void): void;
    protected _deactivatePortDevice(port: number, type: number, mode: number, format: number, callback?: () => void): void;
    protected _writeMessage(uuid: string, message: Buffer, callback?: () => void): void;
    private _parseMessage;
    private _parseDeviceInfo;
    private _parsePortMessage;
    private _parsePortAction;
    private _padMessage;
    private _parseSensorMessage;
}
