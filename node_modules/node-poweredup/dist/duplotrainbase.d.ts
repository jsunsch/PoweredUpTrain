import { Peripheral } from "noble";
import { LPF2Hub } from "./lpf2hub";
/**
 * The DuploTrainBase is emitted if the discovered device is a Duplo Train Base.
 * @class DuploTrainBase
 * @extends LPF2Hub
 * @extends Hub
 */
export declare class DuploTrainBase extends LPF2Hub {
    /**
     * @event DuploTrainBase#distance
     * @ignore
     */
    /**
     * @event DuploTrainBase#tilt
     * @ignore
     */
    /**
     * @event DuploTrainBase#rotate
     * @ignore
     */
    /**
     * @event DuploTrainBase#button
     * @ignore
     */
    /**
     * @event DuploTrainBase#attach
     * @ignore
     */
    /**
     * @event DuploTrainBase#detach
     * @ignore
     */
    static IsDuploTrainBase(peripheral: Peripheral): boolean;
    constructor(peripheral: Peripheral, autoSubscribe?: boolean);
    connect(): Promise<{}>;
    /**
     * Set the color of the LED on the train via a color value.
     * @method DuploTrainBase#setLEDColor
     * @param {number} color A number representing one of the LED color consts.
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    setLEDColor(color: number | boolean): Promise<{}>;
    /**
     * Set the motor speed on a given port.
     * @method DuploTrainBase#setMotorSpeed
     * @param {string} port
     * @param {number | Array.<number>} speed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0. If you are specifying port AB to control both motors, you can optionally supply a tuple of speeds.
     * @param {number} [time] How long to activate the motor for (in milliseconds). Leave empty to turn the motor on indefinitely.
     * @returns {Promise} Resolved upon successful completion of command. If time is specified, this is once the motor is finished.
     */
    setMotorSpeed(port: string, speed: number, time?: number | boolean): Promise<{}>;
    /**
     * Play a built-in train sound.
     * @method DuploTrainBase#playSound
     * @param {number} sound A number representing one of the Train Base sound consts.
     * @returns {Promise} Resolved upon successful issuance of command.
     */
    playSound(sound: number): Promise<{}>;
    /**
     * Ramp the motor speed on a given port.
     * @method DuploTrainBase#rampMotorSpeed
     * @param {string} port
     * @param {number} fromSpeed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0.
     * @param {number} toSpeed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0.
     * @param {number} time How long the ramp should last (in milliseconds).
     * @returns {Promise} Resolved upon successful completion of command.
     */
    rampMotorSpeed(port: string, fromSpeed: number, toSpeed: number, time: number): Promise<{}>;
}
