import { Peripheral } from "noble";
import { LPF2Hub } from "./lpf2hub";
/**
 * The PUPHub is emitted if the discovered device is a Powered UP Hub.
 * @class PUPHub
 * @extends LPF2Hub
 * @extends Hub
 */
export declare class PUPHub extends LPF2Hub {
    /**
     * @event PUPHub#rotate
     * @ignore
     */
    /**
     * @event PUPHub#speed
     * @ignore
     */
    static IsPUPHub(peripheral: Peripheral): boolean;
    constructor(peripheral: Peripheral, autoSubscribe?: boolean);
    connect(): Promise<{}>;
    /**
     * Set the motor speed on a given port.
     * @method PUPHub#setMotorSpeed
     * @param {string} port
     * @param {number | Array.<number>} speed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0. If you are specifying port AB to control both motors, you can optionally supply a tuple of speeds.
     * @param {number} [time] How long to activate the motor for (in milliseconds). Leave empty to turn the motor on indefinitely.
     * @returns {Promise} Resolved upon successful completion of command. If time is specified, this is once the motor is finished.
     */
    setMotorSpeed(port: string, speed: number | [number, number], time?: number | boolean): Promise<{}>;
    /**
     * Ramp the motor speed on a given port.
     * @method PUPHub#rampMotorSpeed
     * @param {string} port
     * @param {number} fromSpeed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0.
     * @param {number} toSpeed For forward, a value between 1 - 100 should be set. For reverse, a value between -1 to -100. Stop is 0.
     * @param {number} time How long the ramp should last (in milliseconds).
     * @returns {Promise} Resolved upon successful completion of command.
     */
    rampMotorSpeed(port: string, fromSpeed: number, toSpeed: number, time: number): Promise<{}>;
    /**
     * Set the light brightness on a given port.
     * @method PUPHub#setLightBrightness
     * @param {string} port
     * @param {number} brightness Brightness value between 0-100 (0 is off)
     * @param {number} [time] How long to turn the light on (in milliseconds). Leave empty to turn the light on indefinitely.
     * @returns {Promise} Resolved upon successful completion of command. If time is specified, this is once the light is turned off.
     */
    setLightBrightness(port: string, brightness: number, time?: number): Promise<{}>;
}
